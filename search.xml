<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[java文件读写操作的一个简单事例]]></title>
    <url>%2F2019%2F03%2F20%2F2018-12-25-java-io01%2F</url>
    <content type="text"><![CDATA[java文件读写操作的一个简单事例package Number; import java.awt.FlowLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import javax.swing.ButtonGroup; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JRadioButton; import javax.swing.JTextArea; public class coin extends JFrame implements ActionListener{ //代码中涉及的异常处理自己看情况添加即可 包名更换成自己的 创建的 ceshi.txt 在自己的java项目中的scr文件夹，点击刷新即可看见 private JTextArea jTextArea=new JTextArea(15,15); private JButton jButton=new JButton(&quot;读取&quot;); private JButton jButton2=new JButton(&quot;写入&quot;); public coin() { JFrame jFrame=new JFrame(&quot;文件读写&quot;); jFrame.setDefaultCloseOperation(EXIT_ON_CLOSE); jFrame.setLayout(new FlowLayout()); jFrame.setSize(300,200); jButton.addActionListener(this); jButton2.addActionListener(this); jFrame.add(jTextArea); jFrame.add(jButton); jFrame.add(jButton2); jFrame.setVisible(true); } //读取文件 public void readfile() throws IOException { File file=new File(&quot;ceshi.txt&quot;);//创建文件 try { InputStream is=new FileInputStream(file);//创建输入流 byte[] buffer=new byte[200]; while(is.read(buffer)!=-1) { String string=new String(buffer); jTextArea.setText(string); } is.close(); } catch (FileNotFoundException e) { // TODO 自动生成的 catch 块 e.printStackTrace(); } } //写入文件 public void writefile() throws IOException { File file=new File(&quot;ceshi.txt&quot;); try { OutputStream os=new FileOutputStream(file,true);//true是追加写入 默认不追加 String string=jTextArea.getText().toString(); byte[] buffer=string.getBytes();//将字符串 转换成byte数组 os.write(buffer); os.close(); } catch (FileNotFoundException e) { // TODO 自动生成的 catch 块 e.printStackTrace(); }// } //按钮点击事件实现 public void actionPerformed(ActionEvent e) { // TODO 自动生成的方法存根 if(e.getSource()==jButton) { try { readfile(); } catch (IOException e1) { // TODO 自动生成的 catch 块 e1.printStackTrace(); } }else if(e.getSource()==jButton2) { try { writefile(); } catch (IOException e1) { // TODO 自动生成的 catch 块 e1.printStackTrace(); } } } public static void main(String args[]) { new coin(); } }]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里巴巴矢量图标库]]></title>
    <url>%2F2019%2F03%2F19%2Fbegin%2F</url>
    <content type="text"><![CDATA[分享一个很棒的图标网站点击下面的链接即可查看Iconfont–阿里巴巴矢量图标库]]></content>
      <tags>
        <tag>随心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试用]]></title>
    <url>%2F2019%2F03%2F19%2Ftest%2F</url>
    <content type="text"><![CDATA[1234]]></content>
      <tags>
        <tag>随心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[几个布局的简单注意点]]></title>
    <url>%2F2019%2F03%2F19%2Fandroid_layout%2F</url>
    <content type="text"><![CDATA[1.LinearLayout(线性布局)注意两个点：1.orientation 属性：布局中组件的排列方式，有horizontal(水平)，vertical(竖直，默认)两种方式。 2.weight 属性：权重属性在屏幕适配时用的比较多(有几种用法可以去百度一下，用一种当 layout_width和layout_height都为match_parent时，可能难理解) 2.RelativeLayout(相对布局)直接看图，也没啥，还有margin和padding写个简单的梅花布局练练就应该都理解了. 3.TableLayout(表格布局)这个基本不常用，一般线性+相对布局就可以了，只需要了解一下。 1.如果我们想一行上有多个组件的话,就要添加一个TableRow的容器,把组件都丢到里面. 2.tablerow中的组件个数就决定了该行有多少列,而列的宽度由该列中最宽的单元格决定. 3.tablerow的layout_width属性,默认是fill_parent的,我们自己设置成其他的值也不会生效， 但是layout_height默认是wrapten——content的,我们却可以自己设置大小. 4.整个表格布局的宽度取决于父容器的宽度(占满父容器本身) 5. android:collapseColumns:设置需要被隐藏的列的序号 android:shrinkColumns:设置允许被收缩的列的列序号 android:stretchColumns:设置运行被拉伸的列的列序号 以上这三个属性的列号都是从0开始算的,比如shrinkColunmns = “2”,对应的是第三列！ 可以设置多个,用逗号隔开比如”0,2”,如果是所有列都生效,则用”*”号即可 除了这三个常用属性,还有两个属性,分别就是跳格子以及合并单元格,这和HTML中的Table类似: android:layout_column=”2”:表示的就是跳过第二个,直接显示到第三个格子处,从1开始算的! android:layout_span=”4”:表示合并4个单元格,也就说这个组件占4个单元格 eg: &lt;TableRow&gt; &lt;TextView /&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;登陆&quot;/&gt; &lt;Button android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;退出&quot;/&gt; &lt;TextView /&gt; &lt;/TableRow&gt; 4.FrameLayout(帧布局)常用属性： android:foreground:设置改帧布局容器的前景图像 android:foregroundGravity:设置前景图像显示的位置 当我们往帧布局里面添加控件的时候,会默认把他们放到这块区域的左上角,而这种布局方式却没有任何的定位方式,所以它应用的场景并不多;帧布局的大小由控件中最大的子控件决定,如果控件的大小一样大的话,那么同一时刻就只能看到最上面的那个组件!后续添加的控件会覆盖前一个! eg: &lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; tools:context=&quot;.MainActivity&quot; android:foreground=&quot;@drawable/logo&quot; android:foregroundGravity=&quot;right|bottom&quot;&gt; &lt;TextView android:layout_width=&quot;200dp&quot; android:layout_height=&quot;200dp&quot; android:background=&quot;#FF6143&quot; /&gt; &lt;TextView android:layout_width=&quot;150dp&quot; android:layout_height=&quot;150dp&quot; android:background=&quot;#7BFE00&quot; /&gt; &lt;TextView android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot; android:background=&quot;#FFFF00&quot; /&gt; &lt;/FrameLayout&gt; 5.GridLayout(网格布局) 用法： step 1:先定义组件的对其方式 android:orientation 水平或者竖直,设置多少行与多少列 step 2:设置组件所在的行或者列,记得是从0开始算的,不设置默认每个组件占一行一列 step 3:设置组件横跨几行或者几列;设置完毕后,需要在设置一个填充:android:layout_gravity = “fill” eg:计算器的清除键占2格 &lt;Button android:layout_columnSpan=&quot;2&quot; android:layout_gravity=&quot;fill&quot; android:text=&quot;清空&quot; /&gt; 6.AbsoluteLayout(绝对布局)这个没啥好说的，基本不用，学java swing时就强调过了 控制大小: android:layout_width:组件宽度 android:layout_height:组件高度 控制位置: android:layout_x:设置组件的X坐标 android:layout_y:设置组件的Y坐标]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[swing 中一些控件的点击事件 (2)--JComboBox]]></title>
    <url>%2F2019%2F03%2F19%2F2018-12-21-java-swing02%2F</url>
    <content type="text"><![CDATA[JComboBoxInteger Month[]= {1,2,3,4,5,6,7,8,9,10,11,12}; JComboBox jComboBox1=new JComboBox(Month); jComboBox1.addItemListener(new ItemListener() { public void itemStateChanged(ItemEvent event) { switch (event.getStateChange()) { case ItemEvent.SELECTED: System.out.println(&quot;选中&quot; + event.getItem()); break; case ItemEvent.DESELECTED: System.out.println(&quot;取消选中&quot;+event.getItem()); break; } } }); JComboBox的监听事件，通过 event.getStateChange() 方法来获取是否处于选中某一项的状态，若处于选中状态,则再通过 event。getItem()即可获取选中项。]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[swing 中一些控件的点击事件 (1)--JButton]]></title>
    <url>%2F2019%2F03%2F19%2F2018-12-21-java-swing01%2F</url>
    <content type="text"><![CDATA[JButtonJButton btn=new JButton(&quot;按钮&quot;); btn.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { //此处添加要执行的操作 } }); 一般按钮个数比较少的情况下，直接使用匿名内部类的方式更为方便。 当有多个按钮的时候，需要让类继承 ActionListener 接口 JButton jButton1=new JButton(&quot;btn1&quot;); JButton jButton2=new JButton(&quot;btn2&quot;); jButton1.addActionListener(this); jButton2.addActionListener(this); //下面需要实现 ActionListener 接口的actionPerformed（）方法 1. public void actionPerformed(ActionEvent e) { if(e.getSource()==jButton1) { System.out.println(&quot;111111&quot;); }else if(e.getSource()==jButton2){ System.out.println(&quot;222222&quot;); } } 2. public void actionPerformed(ActionEvent e) { if(e.getActionCommand().equals(&quot;btn1&quot;)) { System.out.println(&quot;111111&quot;); }else if(e.getActionCommand().equals(&quot;btn2&quot;)){ System.out.println(&quot;222222&quot;); } } 这里会有两种方式，都可以 1.是利用 e.getSource()来直接获取点击的对象名（注意是对象名，jButton1,jButton2） 2.是利用 e.getActionCommand().equals()来直接获取点击按钮的名称，即字符串（btn1.btn2）]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[swing 中一些控件的点击事件 (3)--JList]]></title>
    <url>%2F2019%2F03%2F19%2F2018-12-20-java-swing03%2F</url>
    <content type="text"><![CDATA[JListString province[]= {&quot;省份&quot;,&quot;北京&quot;,&quot;天津&quot;,&quot;上海&quot;,&quot;重庆&quot;}; JList&lt;String&gt; jList=new JList&lt;&gt;(province); jList.addListSelectionListener(new ListSelectionListener() { public void valueChanged(ListSelectionEvent e) { System.out.println(jList.getSelectedValue().toString()); } }); JList 通过 getSelectedValue() 方法即可获取选中项 当然 用 getSelectedIndex() 方法可以获取到点击的项的下标 如此示例中 北京项 下标为1，天津项 下标为2.]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javax/xml/bind/DatatypeConverter 异常]]></title>
    <url>%2F2019%2F03%2F19%2F2018-12-19-javasql01%2F</url>
    <content type="text"><![CDATA[Java 9 及以上 eclipse 链接 SQL数据库 抛出 java.lang.NoClassDefFoundError: javax/xml/bind/DatatypeConverter 异常方法需要导入 javax.xml.bind.jar 去下载一个即可 网址： http://www.java2s.com/Code/Jar/j/Downloadjavaxxmlbindjar.htm]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[swing 中一些控件的点击事件 (4)--JRadioButton及简单用法]]></title>
    <url>%2F2019%2F03%2F19%2F2018-12-24-java-swing04%2F</url>
    <content type="text"><![CDATA[多个JRadioButton必须放到 ButtonGroup 中能起到单选的作用，这里需要注意 ButtonGroup 并不是组件，所以只需把每一个单选按钮添加到 容器内 即可，不需要把 ButtonGroup 添加到容器内，下面演示一下代码package Number; import java.awt.FlowLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import javax.swing.ButtonGroup; import javax.swing.JFrame; import javax.swing.JRadioButton; public class coin extends JFrame implements ActionListener{ private ButtonGroup buttonGroup=new ButtonGroup(); private JRadioButton jRadioButton=new JRadioButton(&quot;男&quot;); private JRadioButton jRadioButton2=new JRadioButton(&quot;女&quot;); public coin() { JFrame jFrame=new JFrame(&quot;单选按钮&quot;); jFrame.setSize(200, 150); jFrame.setLayout(new FlowLayout()); jFrame.setDefaultCloseOperation(EXIT_ON_CLOSE); //将单选按钮添加到按钮组中 buttonGroup.add(jRadioButton); buttonGroup.add(jRadioButton2); //设置单选按钮的点击事件 jRadioButton.addActionListener(this); jRadioButton2.addActionListener(this); //只需将单选按钮添加进入容器 jFrame.add(jRadioButton); jFrame.add(jRadioButton2); jFrame.setVisible(true); } //点击事件实现方法，同前面的 JButton 的方式，具体可以去看前面的JButton的用法 public void actionPerformed(ActionEvent e) { if(e.getSource()==jRadioButton) { System.out.println(&quot;boy&quot;); }else if(e.getSource()==jRadioButton2) { System.out.println(&quot;girl&quot;); } } public static void main(String args[]) { new coin(); } }]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android工程解析]]></title>
    <url>%2F2019%2F03%2F19%2Fandroid_project%2F</url>
    <content type="text"><![CDATA[先看图，这张图再熟悉不过了 下面进行一些解释1.java：我们写Java代码的地方，业务功能都在这里实现 2.res：存放我们各种资源文件的地方，有图片，字符串，动画，音频等，还有各种形式的XML文件 3.drawable：存放各种位图文件，(.png，.jpg，.9png，.gif等)除此之外可能是一些其他的drawable类型的XML文件 4.mipmap-hdpi：高分辨率，一般我们把图片丢这里mipmap-mdpi：中等分辨率mipmap-xhdpi：超高分辨率mipmap-xxhdpi：超超高分辨率 5.layout：该目录下存放的就是我们的布局文件 6.values：该目录下存放的是一些定义的字符串资源、样式资源、颜色资源、数组资源等等 在res目录下，所有的资源文件都会在 R.java 文件下生成对应的资源 id,我们可以通过id访问到对应的资源。例如在java代码中使用相关资源：布局引用：setContentView(R.layout.main);图片引用：imgIcon.setBackgroundDrawableResource(R.drawable.icon); 在xml文件中使用相关资源：(通过 @XXX 即可引用)文本引用：android:text=”@string/hello_world”图片引用：android:background = “@drawable/img_back” 分析几个文件1.布局文件 2.MainActivity.java文件 3.AndroidManifest.xml配置文件]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
</search>
